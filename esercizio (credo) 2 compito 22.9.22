program Lagrange

implicit none
INTEGER, PARAMETER:: nn=200
REAL,PARAMETER :: pi=3.141593
real*8 a,b,xc(0:nn),x(0:nn),y(0:nn),xg(0:nn),yg(0:nn),h,x1(0:nn),y1(0:nn),L(0:nn),p,yg1(0:nn),err(0:nn)
integer i,j,k,n,ng, yg_e(0:nn),yg_c(0:nn)
real*8 :: err_c(0:nn), err_e(0:nn)
real*8 :: En, pval, fval, xval, max_deriv, fatt, prodotto, est_errore
real*8 :: f(0:nn) 

n=4 
print*, 'Grado del polinomio', n

a =0
b =2*pi  
ng=100
h=(b-a)/ng

do i=0,ng
xg(i)=a+i*h
yg(i)=abs(cos(xg(i)))
end do

print*,'I nodi di Chebychev e i valori y_i sono'
do i=0,n
x(i)  = cos((2.*i+1)/(n+1)*(pi/2.))
xc(i) = (a + b)*0.5 - (b - a)*x(i)*0.5
y(i)  = abs(cos(xc(i)))
write(*,*) xc(i), y(i)
end do

print*,'I nodi equidistanti e i valori y_i sono'
do i=0,n
x1(i)=a+i*(b-a)/n
y1(i)=abs(cos(x1(i)))
write(*,*) x1(i),y1(i)
end do


!interpolazione lagrange con nodi chebychev 
do k=0,ng
p=0
do i=0,n
L(i)=1
end do
do i=0,n
do j=0,n
if(i.NE.j) then
L(i)=L(i)*(xg(k)-xc(j))/(xc(i)-xc(j))
end if
end do
p=p+y(i)*L(i)
end do
yg_c(k)=p
end do

!errore cheb
do i=0,ng
err_c(i)=abs(yg(i)-yg_c(i))
end do


!interpolazione lagrange con nodi equidistanti  
do k=0,ng
p=0
do i=0,n
L(i)=1
end do
do i=0,n
do j=0,n
if(i.NE.j) then
L(i)=L(i)*(xg(k)-x1(j))/(x1(i)-x1(j))
end if
end do
p=p+y1(i)*L(i)
end do
yg_e(k)=p
end do

!errore equid 
do i=0,ng
err_e(i)=abs(yg(i)-yg_e(i))
end do


OPEN(94,STATUS='UNKNOWN',ACCESS='SEQUENTIAL',FILE='errori.out')
do i=0,ng
write(94,*)xg(i),err_c(i), err_e(i)
end do
close(94)


xval = 3.518584136962891
fval = abs(cos(xg(i)))


max_deriv = 0.3827      ! massimo di fˆ5 su [0,2pi]
fatt = 120.0d0          ! 5!


prodotto = 1.d0
do i=0,n
   prodotto = prodotto * abs(xval - x1(i))   ! x1(i): nodi usati per interpolare
end do

est_errore = max_deriv / fatt * prodotto

print*, 'Maggiorazione dell’errore teorica = ', est_errore


! Calcola il valore interpolato p_n(3.518584136962891)
pval = f(0)
do i = 1,n
   p = f(i)
   do j = 0,i-1
      p = p * (xval - x1(j))  ! Usa x1 se stai interpolando su nodi equispaziati
   end do
   pval = pval + p
end do

En = abs(fval - pval)
print*, 'Errore reale E(f) = |f(x*) - p_n(x*)| = ', En


end
